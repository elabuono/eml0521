import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.Month;
import java.time.format.DateTimeFormatter;

public class RentalAgreement {
    protected Tool tool;
    protected int rentalDays;
    protected int discount;
    protected LocalDate checkoutDate;
    protected LocalDate dueDate;
    protected int chargeDays;
    protected double preDiscountAmount;
    protected double discountAmount;
    protected double finalCharge;


    /**
     * Constructor for a rental agreement, generated by check outs.
     * @param tool provided Tool object which holds tool info, price, etc.
     * @param rentalDays number of days to be rented
     * @param discount integer form of a percent discount, expected 0-100
     * @param checkoutDateString String representation of date, expected M/d/yy
     */
    RentalAgreement(Tool tool, int rentalDays, int discount, String checkoutDateString) {
        this.tool = tool;
        this.rentalDays = rentalDays;
        this.discount = discount;
        /* Conversion of date string, dates and decimals for calculations */
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("M/d/yy");
        this.checkoutDate = LocalDate.parse(checkoutDateString, formatter);
        this.dueDate = checkoutDate.plusDays(rentalDays);
        this.chargeDays = calculateChargeableDays(tool, checkoutDate, rentalDays);
        this.preDiscountAmount = roundCurrency(chargeDays * tool.getDailyCharge());
        this.discountAmount = roundCurrency(preDiscountAmount * (discount * 0.01));
        this.finalCharge = roundCurrency(preDiscountAmount - discountAmount);
    }

    /**
     * Rental report is a String that is shown to the user at the end of check out.
     * @return a formatted String of information from the rental agreement
     */
    protected String generateRentalReport() {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("M/d/yy");
        return "Tool code: " + tool.getToolCode() +
                "\nTool type: " + tool.getClass().getName() +
                "\nTool brand: " + tool.getBrand() +
                "\nRental days: " + rentalDays +
                "\nCheck out date: " + checkoutDate.format(formatter) +
                "\nDue date: " + dueDate.format(formatter) +
                "\nDaily rental charge: $" + tool.getDailyCharge() +
                "\nCharge days: " + chargeDays +
                "\nPre-discount charge: $" + String.format("%.2f", preDiscountAmount) +
                "\nDiscount percent: " + discount + "%" +
                "\nDiscount amount: $" + String.format("%.2f", discountAmount) +
                "\nFinal charge: $" + String.format("%.2f", finalCharge)
                ;
    }

    /**
     * Determines how many days will actually be charged for the tool rental, considering holidays/weekends.
     * @param tool Tool object which is being rented
     * @param checkoutDate LocalDate object for the starting date
     * @param rentalDays number of days for renting
     * @return the number of days that will be paid
     */
    private int calculateChargeableDays(Tool tool, LocalDate checkoutDate, int rentalDays) {
        int rentedDays = 0;
        int dayCounter = 0;
        boolean isWeekendCharged = tool.isWeekendCharged();
        boolean isHolidayCharged = tool.isHolidayCharged();
        LocalDate checkedDay = checkoutDate.plusDays(1);

        while (dayCounter < rentalDays) {
            if(!isWeekendCharged &&
            (checkedDay.getDayOfWeek() == DayOfWeek.SATURDAY || checkedDay.getDayOfWeek() == DayOfWeek.SUNDAY)) {
                checkedDay = checkedDay.plusDays(1);
                dayCounter++;
                continue;
            }
            if(!isHolidayCharged && isHoliday(checkedDay)) {
                checkedDay = checkedDay.plusDays(1);
                dayCounter++;
                continue;
            }
            rentedDays++;
            checkedDay = checkedDay.plusDays(1);
            dayCounter++;
        }
        return rentedDays;
    }

    /**
     * This method determines if a given date is a holiday. Used only when we need to concern holidays.
     * @param currentDate LocalDate of the day in question
     * @return true if holiday, false otherwise
     */
    private boolean isHoliday(LocalDate currentDate) {
        Month currentMonth = currentDate.getMonth();
        int currentDay = currentDate.getDayOfMonth();
        DayOfWeek currentDayOfWeek = currentDate.getDayOfWeek();

        if((currentMonth == Month.SEPTEMBER) &&
                (currentDay <= 7) &&
                (currentDayOfWeek == DayOfWeek.MONDAY)) {
            return true; // the 1st monday will be <= the 7th day of the month
        } else if(currentMonth == Month.JULY) {
            if((currentDay == 4) && !(currentDayOfWeek == DayOfWeek.SATURDAY || currentDayOfWeek == DayOfWeek.SUNDAY)) {
                return true; // non-weekend 4th of July is observed holiday
            }
            else if ((currentDay == 3) && (currentDayOfWeek == DayOfWeek.FRIDAY)) {
                return true; // the 4th is on Saturday, thus 3rd is holiday
            }
            else if ((currentDay == 5) && (currentDayOfWeek == DayOfWeek.MONDAY)) {
                return true; // the 4th is on Sunday, thus 5th is holiday
            }
        }
        return false;
    }

    /**
     * Helper function for properly rounding doubles for currency usage.
     * @param val double representing currency value
     * @return rounded value to the cents place with no truncation
     */
    private double roundCurrency(double val) {
        return BigDecimal.valueOf(val).setScale(2, RoundingMode.HALF_UP).doubleValue();
    }
}
